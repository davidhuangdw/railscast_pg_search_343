### postgresql text search

        # compatible scheme: using sql format -- db/structure.sql
        # application.rb
            config.active_record.schema_format = :sql
        rake db:migrate                         # generate db/structure.sql

        # migrations for speed_up and 'ts_vector, ts_rank...'
        class AddSearchIndexToArticles < ActiveRecord::Migration
          def up
            execute "create index articles_name on articles using gin(to_tsvector('english', name))"
            execute "create index articles_content on articles using gin(to_tsvector('english', content))"
          end

          def down
            execute "drop index articles_name"
            execute "drop index articles_content"
          end
        end


        # migrations for 'accent()', 'unaccent()'
        class AddUnaccentExtension < ActiveRecord::Migration
          def up
            execute "create extension unaccent"
          end

          def down
            execute "drop extension unaccent"
          end
        end

          pg_search_scope :search, against:[:name, :content],
                  using: {tsearch:{dictionary:'english'}},
                  associated_against: {author: :name, comments: [:name, :content]},
                  ignoring: :accents


        # gem 'pg_search'
        gem 'pg_search'
        class Article
          ...
          include PgSearch
          pg_search_scope :search, against:[:name, :content],
                          using: {tsearch:{dictionary:'english'}},
                          associated_against: {author: :name, comments: [:name, :content]}

        # '@@' instead of 'ilike'
          scope :search, ->(query)do
            where("name @@ :q or content @@ :q", q: "%#{query}%") if query.present?
          end

